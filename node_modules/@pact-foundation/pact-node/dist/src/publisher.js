"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Publisher = void 0;
var path = require("path");
var fs = require("fs");
var logger_1 = require("./logger");
var spawn_1 = require("./spawn");
var promise_timeout_1 = require("promise-timeout");
var spawn_2 = require("./spawn");
var pact_standalone_1 = require("./pact-standalone");
var checkTypes = require("check-types");
var Publisher = (function () {
    function Publisher(options) {
        this.__argMapping = {
            pactFilesOrDirs: spawn_2.DEFAULT_ARG,
            pactBroker: '--broker-base-url',
            pactBrokerUsername: '--broker-username',
            pactBrokerPassword: '--broker-password',
            pactBrokerToken: '--broker-token',
            tags: '--tag',
            consumerVersion: '--consumer-app-version',
            verbose: '--verbose',
        };
        options = options || {};
        options.tags = options.tags || [];
        options.timeout = options.timeout || 60000;
        checkTypes.assert.nonEmptyString(options.pactBroker, 'Must provide the pactBroker argument');
        checkTypes.assert.nonEmptyString(options.consumerVersion, 'Must provide the consumerVersion argument');
        checkTypes.assert.arrayLike(options.pactFilesOrDirs, 'Must provide the pactFilesOrDirs argument');
        checkTypes.assert.nonEmptyArray(options.pactFilesOrDirs, 'Must provide the pactFilesOrDirs argument with an array');
        if (options.pactFilesOrDirs) {
            checkTypes.assert.array.of.string(options.pactFilesOrDirs);
            options.pactFilesOrDirs = options.pactFilesOrDirs.map(function (v) {
                var newPath = path.resolve(v);
                if (!fs.existsSync(newPath)) {
                    throw new Error("Path '" + v + "' given in pactFilesOrDirs does not exists.");
                }
                return newPath;
            });
        }
        if (options.pactBroker) {
            checkTypes.assert.string(options.pactBroker);
        }
        if (options.pactBrokerUsername) {
            checkTypes.assert.string(options.pactBrokerUsername);
        }
        if (options.pactBrokerPassword) {
            checkTypes.assert.string(options.pactBrokerPassword);
        }
        if (options.verbose === undefined && logger_1.verboseIsImplied()) {
            options.verbose = true;
        }
        if ((options.pactBrokerUsername && !options.pactBrokerPassword) ||
            (options.pactBrokerPassword && !options.pactBrokerUsername)) {
            throw new Error('Must provide both Pact Broker username and password. None needed if authentication on Broker is disabled.');
        }
        if (options.pactBrokerToken &&
            (options.pactBrokerUsername || options.pactBrokerPassword)) {
            throw new Error('Must provide pactBrokerToken or pactBrokerUsername/pactBrokerPassword but not both.');
        }
        this.options = options;
    }
    Publisher.prototype.publish = function () {
        var _this = this;
        logger_1.default.info("Publishing pacts to broker at: " + this.options.pactBroker);
        return promise_timeout_1.timeout(new Promise(function (resolve, reject) {
            var instance = spawn_1.default.spawnBinary(pact_standalone_1.default.brokerPath, [{ cliVerb: 'publish' }, _this.options], _this.__argMapping);
            var output = [];
            instance.stdout.on('data', function (l) { return output.push(l); });
            instance.stderr.on('data', function (l) { return output.push(l); });
            instance.once('close', function (code) {
                var o = output.join('\n');
                var pactUrls = /^https?:\/\/.*\/pacts\/.*$/gim.exec(o);
                if (code !== 0 || !pactUrls) {
                    logger_1.default.error("Could not publish pact:\n" + o);
                    return reject(new Error(o));
                }
                logger_1.default.info(o);
                return resolve(pactUrls);
            });
        }), this.options.timeout).catch(function (err) {
            if (err instanceof promise_timeout_1.TimeoutError) {
                throw new Error("Timeout waiting for publication process to complete");
            }
            throw err;
        });
    };
    return Publisher;
}());
exports.Publisher = Publisher;
exports.default = (function (options) { return new Publisher(options); });
//# sourceMappingURL=publisher.js.map