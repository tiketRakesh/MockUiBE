"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extract = void 0;
var chalk_1 = require("chalk");
var pact_environment_1 = require("../../src/pact-environment");
var fs = require("fs");
var path = require("path");
var unzipper = require("unzipper");
var tar = require("tar");
var sumchecker = require('sumchecker');
var console_1 = require("../connectors/console");
function extract(data) {
    if (fs.existsSync(data.platformFolderPath)) {
        return Promise.resolve(__assign(__assign({}, data), { binaryAlreadyInstalled: true }));
    }
    if (!fs.existsSync(data.checksumFilepath) &&
        data.checksumFilepath !== 'skip') {
        console.error(data.checksumDownloadPath);
        console_1.throwError("Checksum file missing from standalone directory. Aborting.");
    }
    fs.mkdirSync(data.platformFolderPath);
    console.log(chalk_1.default.yellow("Extracting binary from " + data.filepath + ". (" + JSON.stringify(data) + ")"));
    var basename = path.basename(data.filepath);
    return ((data.checksumFilepath !== 'skip'
        ? sumchecker('sha1', data.checksumFilepath, path.dirname(data.filepath), basename).then(function () { return console.log(chalk_1.default.green("Checksum passed for '" + basename + "'.")); }, function () {
            return console_1.throwError("Checksum rejected for file '" + basename + "' with checksum " + path.basename(data.checksumFilepath));
        })
        : Promise.resolve())
        .then(function () {
        if (data.isWindows) {
            fs.createReadStream(data.filepath)
                .pipe(unzipper.Extract({
                path: data.platformFolderPath,
            }))
                .on('entry', function (entry) { return entry.autodrain(); })
                .promise();
        }
        else if (data.filepath.endsWith('.tar.gz')) {
            tar.x({
                file: data.filepath,
                cwd: data.platformFolderPath,
                preserveOwner: false,
            });
        }
        else if (data.filepath.endsWith('.gz')) {
            throw new Error("Implement this: " + data.filepath);
        }
        else {
            throw new Error("Unknown file type extracting: " + data.filepath);
        }
    })
        .then(function () {
        var publishPath = path.resolve(data.platformFolderPath, 'pact', 'bin', "pact-publish" + (pact_environment_1.default.isWindows() ? '.bat' : ''));
        if (fs.existsSync(publishPath)) {
            fs.unlinkSync(publishPath);
        }
        console.log(chalk_1.default.green('Extraction done.'));
    })
        .then(function () {
        return Promise.resolve(data);
    })
        .catch(function (e) {
        return console_1.throwError("Extraction failed for " + data.filepath + ": " + e);
    }));
}
exports.extract = extract;
//# sourceMappingURL=extract.js.map