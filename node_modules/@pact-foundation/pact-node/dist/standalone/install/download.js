"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = void 0;
var chalk_1 = require("chalk");
var fs = require("fs");
var path = require("path");
var versions_1 = require("../versions");
var urls_1 = require("../urls");
var http_1 = require("../connectors/http");
var tracking_1 = require("../connectors/tracking");
function download(data) {
    console.log(chalk_1.default.gray("Installing Pact Standalone Binary for " + data.platform + "."));
    return new Promise(function (resolve, reject) {
        if (fs.existsSync(path.resolve(data.filepath))) {
            console.log(chalk_1.default.yellow('Binary already downloaded, skipping...'));
            resolve(__assign(__assign({}, data), { binaryAlreadyDownloaded: true }));
            return;
        }
        console.log(chalk_1.default.yellow("Downloading Pact Standalone Binary v" + versions_1.PACT_STANDALONE_VERSION + " for platform " + data.platform + " from " + data.binaryDownloadPath));
        tracking_1.trackDownload(data.platform);
        if (urls_1.isHttpUrl(data.binaryDownloadPath)) {
            http_1.downloadFileRetry(data.binaryDownloadPath, data.filepath).then(function () {
                console.log(chalk_1.default.green("Finished downloading binary to " + data.filepath));
                resolve(data);
            }, function (e) {
                return reject("Error downloading binary from " + data.binaryDownloadPath + ": " + e);
            });
        }
        else if (fs.existsSync(data.binaryDownloadPath)) {
            fs.createReadStream(data.binaryDownloadPath)
                .on('error', function (e) {
                return reject("Error reading the file at '" + data.binaryDownloadPath + "': " + e);
            })
                .pipe(fs
                .createWriteStream(data.filepath)
                .on('error', function (e) {
                return reject("Error writing the file to '" + data.filepath + "': " + e);
            })
                .on('close', function () { return resolve(data); }));
        }
        else {
            reject("Could not get binary from '" + data.binaryDownloadPath + "' as it's not a URL and does not exist at the path specified.");
        }
    });
}
exports.download = download;
//# sourceMappingURL=download.js.map