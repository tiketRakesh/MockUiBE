"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinaryEntries = exports.CONFIG = exports.PACT_DEFAULT_LOCATION = void 0;
var versions_1 = require("./versions");
var path = require("path");
var fs = require("fs");
var console_1 = require("./connectors/console");
var urls_1 = require("./urls");
exports.PACT_DEFAULT_LOCATION = "https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v" + versions_1.PACT_STANDALONE_VERSION + "/";
function getBinaryLocation(location, basePath) {
    if (!location || location.length === 0) {
        return undefined;
    }
    return urls_1.isHttpUrl(location) ? location : path.resolve(basePath, location);
}
function findPackageConfig(location, tries) {
    if (tries === void 0) { tries = 10; }
    if (tries === 0) {
        return {};
    }
    var packagePath = path.resolve(location, 'package.json');
    if (fs.existsSync(packagePath)) {
        var config = require(packagePath).config;
        if (config && (config.pact_binary_location || config.pact_do_not_track)) {
            return {
                binaryLocation: getBinaryLocation(config.pact_binary_location, location),
                doNotTrack: config.pact_do_not_track,
            };
        }
    }
    return findPackageConfig(path.resolve(location, '..'), tries - 1);
}
function createConfig(location) {
    if (location === void 0) { location = process.cwd(); }
    var packageConfig = findPackageConfig(location);
    var PACT_BINARY_LOCATION = packageConfig.binaryLocation || exports.PACT_DEFAULT_LOCATION;
    var CHECKSUM_SUFFIX = '.checksum';
    return {
        doNotTrack: packageConfig.doNotTrack ||
            process.env.PACT_DO_NOT_TRACK !== undefined ||
            false,
        binaries: [
            {
                platform: 'win32',
                binary: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-win32.zip",
                binaryChecksum: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-win32.zip" + CHECKSUM_SUFFIX,
                downloadLocation: PACT_BINARY_LOCATION,
                folderName: "win32-" + versions_1.PACT_STANDALONE_VERSION,
                type: 'ruby-standalone',
            },
            {
                platform: 'darwin',
                binary: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-osx.tar.gz",
                binaryChecksum: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-osx.tar.gz" + CHECKSUM_SUFFIX,
                downloadLocation: PACT_BINARY_LOCATION,
                folderName: "darwin-" + versions_1.PACT_STANDALONE_VERSION,
                type: 'ruby-standalone',
            },
            {
                platform: 'linux',
                arch: 'x64',
                binary: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-linux-x86_64.tar.gz",
                binaryChecksum: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-linux-x86_64.tar.gz" + CHECKSUM_SUFFIX,
                downloadLocation: PACT_BINARY_LOCATION,
                folderName: "linux-x64-" + versions_1.PACT_STANDALONE_VERSION,
                type: 'ruby-standalone',
            },
            {
                platform: 'linux',
                arch: 'ia32',
                binary: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-linux-x86.tar.gz",
                binaryChecksum: "pact-" + versions_1.PACT_STANDALONE_VERSION + "-linux-x86.tar.gz" + CHECKSUM_SUFFIX,
                downloadLocation: PACT_BINARY_LOCATION,
                folderName: "linux-ia32-" + versions_1.PACT_STANDALONE_VERSION,
                type: 'ruby-standalone',
            },
        ],
    };
}
exports.CONFIG = createConfig();
function getBinaryEntries(platform, arch) {
    if (platform === void 0) { platform = process.platform; }
    if (arch === void 0) { arch = process.arch; }
    var entries = exports.CONFIG.binaries.filter(function (value) {
        return value.platform === platform && (value.arch ? value.arch === arch : true);
    });
    if (entries.length === 0) {
        throw console_1.throwError("Cannot find binary for platform '" + platform + "' with architecture '" + arch + "'.");
    }
    return entries;
}
exports.getBinaryEntries = getBinaryEntries;
//# sourceMappingURL=config.js.map