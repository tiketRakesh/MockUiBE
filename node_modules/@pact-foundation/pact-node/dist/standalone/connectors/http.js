"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFileRetry = void 0;
var chalk_1 = require("chalk");
var fs = require("fs");
var console_1 = require("./console");
var request_1 = require("./boundaries/request");
var config = require('libnpmconfig');
function downloadFileRetry(url, filepath, retry) {
    if (retry === void 0) { retry = 3; }
    return new Promise(function (resolve, reject) {
        var len = 0;
        var downloaded = 0;
        var time = Date.now();
        var ca = config.read()['cafile'];
        if (ca) {
            ca = fs.readFileSync(ca);
        }
        request_1.request({
            url: url,
            headers: {
                'User-Agent': 'https://github.com/pact-foundation/pact-js-core',
            },
            strictSSL: config.read()['strict-ssl'],
            agentOptions: {
                ca: ca,
            },
        })
            .on('error', function (e) { return reject(e); })
            .on('response', function (res) {
            return (len = parseInt(res.headers['content-length'], 10));
        })
            .on('data', function (chunk) {
            downloaded += chunk.length;
            var now = Date.now();
            if (now - time > 1000) {
                time = now;
                console.log(chalk_1.default.gray("Downloaded " + ((100 * downloaded) / len).toFixed(2) + "%..."));
            }
        })
            .pipe(fs.createWriteStream(filepath))
            .on('finish', resolve);
    }).catch(function (e) {
        return retry-- === 0 ? console_1.throwError(e) : downloadFileRetry(url, filepath, retry);
    });
}
exports.downloadFileRetry = downloadFileRetry;
//# sourceMappingURL=http.js.map